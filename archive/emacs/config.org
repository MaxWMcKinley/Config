#+STARTUP: overview

* Packages
** Use Package

#+BEGIN_SRC emacs-lisp

(require 'use-package-ensure)
(setq use-package-always-ensure t)

#+END_SRC

** Ivy and Friends

#+BEGIN_SRC emacs-lisp

(use-package ivy
  :delight
  :init
  (progn
    (setq enable-recursive-minibuffers t)
    (setq ivy-use=virtual-buffers t))
  :config
  (ivy-mode 1))

(use-package swiper
  :delight
  :bind ("C-s" . swiper))

#+END_SRC

** Magit
*** TODO Get all the top level items to be unfolded always

#+BEGIN_SRC emacs-lisp

(use-package magit
  :bind ("C-c g" . magit-status)
  :config
  (setf (alist-get 'unpushed magit-section-initial-visibility-alist) 'show))

#+END_SRC

** Projectile

#+BEGIN_SRC emacs-lisp

  (use-package projectile
    :delight
    :init
    (progn
      (setq projectile-completion-system 'ivy)
      (setq projectile-mode-line-prefix nil)
      (setq projectile-switch-project-action #'projectile-dired)
      (setq projectile-project-search-path '("~/proj/" "~/scripts/")))
    :config
    (progn
      (projectile-register-project-type 'solidity '("truffle-config.js")
                                        :compile "truffle compile"
                                        :test "ferd runDevTests -ct Axoni AB"
                                        :run "ferd setupEnv -ct Axoni -v"
                                        :src-dir "src/"
                                        :test-dir "src/test/"
                                        :test-suffix "Test")
      (projectile-mode +1))
    :bind ("M-p" . projectile-command-map))

#+END_SRC

** Treemacs

#+BEGIN_SRC emacs-lisp

  (use-package treemacs
    :bind (("C-x t" . treemacs)
      ("C-t" . treemacs-select-window)))

  (use-package treemacs-projectile
    :after treemacs projectile)

  (use-package treemacs-magit
     :after treemacs magit)

#+END_SRC

** Perspective
*** TODO Figure out how to set magit and sql on startup
*** TODO Delete org and code/main persps when possible
*** TODO Switch to remote package once it has state functions
*** TODO Fix window keymap in magit

#+BEGIN_SRC emacs-lisp

(use-package perspective
  :load-path "~/.emacs.d/lisp/perspective-el"
  :config (persp-mode))

(persp-state-load "~/.emacs.d/persp-state")

#+END_SRC

** Hydra

#+BEGIN_SRC emacs-lisp

(use-package hydra)

#+END_SRC

** Company

#+BEGIN_SRC emacs-lisp

(use-package company
  :hook (after-init-hook . global-company-mode))

#+END_SRC

** Flycheck

#+BEGIN_SRC emacs-lisp

(use-package flycheck
  :hook (after-init-hook . global-flycheck-mode))

#+END_SRC

** Powerline

#+BEGIN_SRC emacs-lisp

(use-package powerline
  :init
  (setq powerine-default-seperator 'wave)
  :config
  (powerline-center-theme))

#+END_SRC

** Ripgrep

#+BEGIN_SRC emacs-lisp
(use-package deadgrep
  :bind ("M-s" . deadgrep))
#+END_SRC

** Avy

#+BEGIN_SRC emacs-lisp
(use-package avy
  :bind (("M-j" . avy-goto-char-2)
    ("M-g g" . avy-goto-line)))
#+END_SRC

** Ace Window

#+BEGIN_SRC emacs-lisp

(use-package ace-window
  :init
  (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
  :bind ("M-o" . ace-window))

#+END_SRC

** Multi Cursor

#+BEGIN_SRC emacs-lisp

  (use-package multiple-cursors
    :bind (("C->" . mc/mark-next-like-this)
           ("C-<" . mc/mark-previous-like-this)))

#+END_SRC

** YASnippets

#+BEGIN_SRC emacs-lisp

  (use-package yasnippet
    :config (yas-global-mode))

#+END_SRC

** Docker

#+BEGIN_SRC emacs-lisp

(use-package docker
  :bind ("C-c d" . docker))

#+END_SRC

** Undo Tree

#+BEGIN_SRC emacs-lisp

(use-package undo-tree
  :config
  (global-undo-tree-mode)
  :bind ("M-/" . undo-tree-visualize))

#+END_SRC

** JSON Navigator

#+BEGIN_SRC emacs-lisp

(use-package json-navigator)

#+END_SRC

** Delight

#+BEGIN_SRC emacs-lisp

(use-package delight)

#+END_SRC

** String inflection

#+BEGIN_SRC emacs-lisp

(use-package string-inflection
  :bind ("C-c i" . string-inflection-cycle))

#+END_SRC

** Witch key
#+BEGIN_SRC emacs-lisp

  (use-package which-key
    :delight
    :config (which-key-mode))

#+END_SRC

** Move Border

#+BEGIN_SRC emacs-lisp

(use-package move-border
  :load-path "~/.emacs.d/lisp/move-border")

#+END_SRC

* ~ Aesthetic ~ 
#+BEGIN_SRC emacs-lisp

(toggle-frame-fullscreen)
(menu-bar-mode -1)
(tool-bar-mode -1)
(toggle-scroll-bar -1)
(column-number-mode)
(show-paren-mode)
(global-display-line-numbers-mode)

(setq frame-title-format "Emax")
(setq inhibit-startup-message t)
(set-default 'cursor-type 'bar)
(fset 'yes-or-no-p 'y-or-n-p)

(use-package spacemacs-theme
  :no-require t
  :init
  (setq spacemacs-theme-comment-italic t)
  (setq spacemacs-theme-keyword-italic t)
  (setq spacemacs-theme-comment-bg nil)
  :config
  (load-theme `spacemacs-dark t))

#+END_SRC

* Languages
** SQL

#+BEGIN_SRC emacs-lisp

(setq sql-user "axcore")
(setq sql-password "axcore")
(setq sql-database "axcore")
(setq sql-server "localhost")
(setq sql-port 54321)

 (add-hook 'sql-login-hook 'my-sql-login-hook)
 (defun my-sql-login-hook ()
   "Custom SQL log-in behaviours. See `sql-login-hook'."
   ;; n.b. If you are looking for a response and need to parse the
   ;; response, use `sql-redirect-value' instead of `comint-send-string'.
   (when (eq sql-product 'postgres)
     (let ((proc (get-buffer-process (current-buffer))))
       ;; Output each query before executing it. (n.b. this also avoids
       ;; the psql prompt breaking the alignment of query results.)
       (comint-send-string proc "\\set ECHO queries\n"))))

#+END_SRC

** Markdown
#+BEGIN_SRC emacs-lisp

  (use-package markdown-mode
    :init (setq markdown-command "pandoc --standalone --from markdown --to html"))

#+END_SRC

** Solidity

#+BEGIN_SRC emacs-lisp

  ;; (use-package solidity-mode
  ;;   :init
  ;;   (progn
  ;;     (setq solidity-comment-style 'slash)
  ;;     (setq solidity-solc-path "/usr/bin/solc")))
  ;; ;;   :hook (solidity-mode-hook . 
  ;; ;;     (lambda ()
  ;; ;;     (set (make-local-variable 'company-backends)
  ;; ;; 		(append '((company-solidity company-capf company-dabbrev-code))
  ;; ;; 			company-backends)))))

  ;; (use-package solidity-flycheck
  ;;   :init
  ;;   (setq solidity-flycheck-solc-checker-active t))

  ;; (use-package company-solidity)

#+END_SRC

** YAML

#+BEGIN_SRC emacs-lisp

(use-package flycheck-yamllint
  :hook (flycheck-mode-hook . flycheck-yamllint-setup)
  :after (flycheck))

#+END_SRC

** Scala

#+BEGIN_SRC emacs-lisp

(use-package scala-mode
  :interpreter
  ("scala" . scala-mode))

#+END_SRC

** Dockerfile

#+BEGIN_SRC emacs-lisp
(use-package dockerfile-mode
  :mode ("Dockerfile\\'" . dockerfile-mode))
#+END_SRC

* Customization

#+BEGIN_SRC emacs-lisp

(electric-pair-mode)

(setq vc-follow-symlinks t)

(setq-default indent-tabs-mode nil)
(setq tab-width 4)
(setq indent-line-function 'insert-tab)
(setq tab-stop-list '(4 8 12))
(setq c-default-style "stroustrup") 
(setq c-basic-offset 4) 

(delete-selection-mode t)

(setq backup-directory-alist '(("" . "~/.emacs.d/backups")))
(setq auto-save-file-name-transforms '(("\\`/[^/]*:\\([^/]*/\\)*\\([^/]*\\)\\'" "/tmp/\\2" t)))

(setq initial-scratch-message nil)

(define-key input-decode-map [?\C-i] [C-i])
(define-key input-decode-map [?\C-m] [C-m])

(defun toggle-frame-split ()
  "If the frame is split vertically, split it horizontally or vice versa.
Assumes that the frame is only split into two."
  (interactive)
  (unless (= (length (window-list)) 2) (error "Can only toggle a frame split in two"))
  (let ((split-vertically-p (window-combined-p)))
    (delete-window) ; closes current window
    (if split-vertically-p
        (split-window-horizontally)
      (split-window-vertically)) ; gives us a split with the other window twice
    (switch-to-buffer nil))) ; restore the original window in this part of the frame

#+END_SRC

** Keybindings / Hydra
*** TODO Macros
*** TODO Projectile
*** TODO Treemacs
*** TODO Ediff

ctrl:
q   w: window   e   r   t   y   u   i   o   p: movement
a   s   d   f: movement   g   h   j   k   l   ;
z: undo   x   c: copy   v: paste   b: movement   n: movement   m   ,   .   /

alt: 
q   w   e   r   t   y   u   i   o   p: movement
a   s: search   d   f: movement   g   h   j   k   l   ;
z: undo   x   c: copy   v: paste   b: movement   n: movement   m   ,   .   /
scratch buffer

*** Set up pretty hydra

#+BEGIN_SRC emacs-lisp

(use-package pretty-hydra)

#+END_SRC

*** Set up hydra posframe
**** TODO Get rid of border and a 3d shadow like effect instead [[https://github.com/Ladicle/hydra-posframe][Example]]
**** TODO Add some padding on the inside
**** TODO Make the titles bold [[https://github.com/jerrypnz/major-mode-hydra.el][Example]]
**** TODO Hydra posframe makes a minibuffer window on mac when used the first time

#+BEGIN_SRC emacs-lisp

  (use-package posframe)
  ;; (use-package hydra-posframe
  ;;   :load-path "~/.emacs.d/lisp/hydra-posframe"
  ;;   :hook (after-init . hydra-posframe-enable))

#+END_SRC

*** Window hydra
**** DONE Figure out why the last line of Resize is being ignored (resolved with move to mac)

#+BEGIN_SRC emacs-lisp

  (pretty-hydra-define hydra-window (:title "Window Shortcuts" :separator "━") 
    ("Movement"
      (("w" ace-window "Switch window" :color blue)
       ("m" ace-swap-window "Move window" :color blue))
    "Layout"
      (("d" persp-switch-quick "Perspective" :color blue)
       ("s" persp-switch "New layout" :color blue)
       ("|" split-window-right "Vertical" :color blue)
       ("_" split-window-below "Horizontal" :color blue)
       ("t" toggle-frame-split "Toggle split" :color blue)
       ("n" make-frame "New frame" :color blue))
    "Close"
      (("c" delete-window "Close" :color blue)
       ("o" ace-delete-window "Close Other" :color blue))
    "Resize"
      (("f" ace-delete-other-windows "Fullscreen" :color blue)
       ("b" balance-windows "Balance" :color blue)
       ("j" move-border-left "←")
       ("l" move-border-right "→")
       ("i" move-border-up "↑")
       ("k" move-border-down "↓"))))

  ;; These lines make it impossible to start magit initially
  (with-eval-after-load 'magit-log
    (define-key magit-status-mode-map (kbd "C-w") nil))
  (with-eval-after-load 'magit-log
    (define-key magit-process-mode-map (kbd "C-w") nil))
  (define-key global-map (kbd "C-w") 'hydra-window/body)

#+END_SRC

*** Macro hydra

#+BEGIN_SRC emacs-lisp

(pretty-hydra-define hydra-macro (:title "Macro Shortcuts" :separator "━") 
  ("Define"
    (("s" kmacro-start-macro "Start Macro Definition" :color blue)
     ("e" kmacro-end-macro "Stop Macro Definition" :color blue)
     ("q" kbd-macro-query "Add macro query" :color blue)
     ("n" name-last-kbd-macro "Name last macro" :color blue))
  "Execute"
    (("m" kmacro-end-and-call-macro "Call last macro" :color blue)
     ("r" apply-macro-to-region-lines "Call last macro on each line in region" :color blue))
   "Edit"
     (("w" kmacro-edit-macro "Edit last macro" :color blue)
      ("j" edit-kbd-macro "Edit named macro" :color blue)
      ("i" inserst-kbd-macro "Insert last macro" :color blue))))

(define-key global-map (kbd "<C-m>") 'hydra-macro/body)

#+END_SRC


*** File switching hydra
**** TODO Create named eyebrowse layouts

#+BEGIN_SRC emacs-lisp

(pretty-hydra-define hydra-file (:title "File Shortcuts" :separator "━") 
  ("File"
    (("f" projectile-find-file "Project" :color blue)
     ("p" find-file "Path" :color blue))
  "Buffer"
    (("b" ivy-switch-buffer "Switch" :color blue))
  "Layout"
    (("c" eyebrowse-mode "Code" :color blue))))

(define-key global-map (kbd "C-j") 'hydra-file/body)

#+END_SRC

* Org Mode

#+BEGIN_SRC emacs-lisp

  (define-key global-map (kbd "C-c l") 'org-store-link)
  (define-key global-map (kbd "C-c a") 'org-agenda)

  (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
  
  (use-package org
    :pin org)

  (use-package org-bullets
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

  (use-package htmlize)

  (org-babel-do-load-languages 'org-babel-load-languages
     '(
       (emacs-lisp . t)
       (shell . t)
      ))

#+END_SRC

* Magit

#+BEGIN_SRC emacs-lisp

(setq smerge-command-prefix (kbd "C-c m"))

#+END_SRC

